# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthResponse {
  access_token: String!
  user: User!
}

type Book {
  _id: ID!
  author: String!
  companyId: ID!
  condition: String
  coverImage: String
  createdAt: DateTime!
  createdBy: ID!
  description: String
  estimatedPrice: Float
  genre: String
  images: [String!]!
  isbn: String
  language: String
  publishedYear: Float
  publisher: String
  title: String!
  updatedAt: DateTime!
}

type Company {
  _id: ID!
  createdAt: DateTime!
  description: String
  isActive: Boolean!
  logo: String
  name: String!
  slug: String!
  updatedAt: DateTime!
}

input CreateBookInput {
  author: String!
  companyId: ID!
  condition: String
  coverImage: String
  description: String
  estimatedPrice: Float
  genre: String
  images: [String!]
  isbn: String
  language: String
  publishedYear: Float
  publisher: String
  title: String!
}

input CreateCompanyInput {
  description: String
  logo: String
  name: String!
}

input CreateUserInput {
  companyId: ID!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  role: UserRole! = USER
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createBook(createBookInput: CreateBookInput!): Book!
  createCompany(createCompanyInput: CreateCompanyInput!): Company!
  createUser(createUserInput: CreateUserInput!): User!
  login(loginInput: LoginInput!): AuthResponse!
  register(registerInput: RegisterInput!): AuthResponse!
}

type Query {
  book(id: ID!): Book!
  books(search: String): [Book!]!
  companies: [Company!]!
  company(id: ID!): Company!
  companyBySlug(slug: String!): Company!
  me: User!
  user(id: ID!): User!
  users: [User!]!
}

input RegisterInput {
  companyDescription: String
  companyName: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

type User {
  _id: ID!
  companyId: ID!
  createdAt: DateTime!
  email: String!
  firstName: String!
  isActive: Boolean!
  lastLoginAt: DateTime
  lastName: String!
  role: UserRole!
  updatedAt: DateTime!
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}